expression nassoc 7 ( _ ) ;
expression nassoc 13 exchange_with_in_to_ ;
expression nassoc 13 prove_from_ ;
expression nassoc 13 prove_with_from_ ;
expression rassoc 13 _ = _ ;
expression rassoc 13 _ /= _ ;
expression rassoc 15 _ -> _ ;
expression rassoc 13 _ ~> _ ;
expression rassoc 14 _ : _ ;
expression rassoc 12 _ :: _ ;
expression rassoc 12 _ is in _ ;
expression lassoc 9 _ _ ;
expression nassoc 8 [] ;
expression nassoc 8 Set ;
expression nassoc 8 cA ;
expression nassoc 8 cB ;
expression nassoc 8 ca ;
expression nassoc 8 cb ;
expression nassoc 8 cc ;
expression nassoc 8 cp ;


exchange x with y in x to y ;

(exchange x with y in e1 to e1') ->
  (exchange x with y in e2 to e2') ->
  (exchange x with y in (e1 e2) to (e1' e2')) ;

(e /= x) -> (e /= (e1 e2)) -> exchange x with y in e to e ;


a is in (a :: xs) ;
(a is in xs) -> (a is in (b :: xs)) ;

--inference from aim
prove B with B from K ;


--modus ponens
(exchange p' with p in (f : (p' : P') ~> Q')
    to (f : (p : P) ~> Q)) ->
  (prove (p : P) from K) ->
  (prove (b : B) with (f p : Q) from K) ->
  (prove (b : B) with (f : (p' : P') ~> Q') from K) ;


--proving implication
(prove B from (A :: K)) -> (prove (b : (A ~> B)) from K) ;
--(the second rule is just so in a chain of functions, not every subpart of the function needs to be named with a proof)
(prove B from (A :: K)) -> (prove (A ~> B) from K) ;


--inference from context
(P is in K) -> (prove B with P from K) -> (prove B from K) ;

prove (cp : (ca : cA) ~> (q : cA)) from []
--prove (q : cA) from ((ca : cA) :: [])
